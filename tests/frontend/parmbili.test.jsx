// Generated by Selenium IDE
require("chromedriver");
const chrome = require('selenium-webdriver/chrome');
const { Builder, By, Key, until } = require('selenium-webdriver');

const assert = require('assert')


const screen = {width: 776, height: 816};
let chrome_options = new chrome.Options().windowSize(screen);

/** For Backend */
chrome_options.addArguments("--proxy-server='direct://'");
chrome_options.addArguments("--proxy-bypass-list=*");

/** For Front End */
chrome_options.addArguments("--headless");
chrome_options.addArguments("--disable-gpu");
chrome_options.addArguments("--blink-settings=imagesEnabled=false"); 



describe('Parmbili Unit Test', function() {
	this.timeout(30000);
	let driver;
	let vars;
	beforeEach(async function() {
		driver = await new Builder().forBrowser('chrome').setChromeOptions(chrome_options).build()
		vars = {}
	});
	afterEach(async function() {
		await driver.quit();
	});
	it('Till', async function() {
		// Test name: Till
		// Step # | name | target | value
		// 1 | open | http://127.0.0.1:5173/ | 
		await driver.get("http://127.0.0.1:5173/")
		// 2 | setWindowSize | 786x816 | 
		await driver.manage().window().setRect({ width: 786, height: 816 })
		// 3 | click | css=main | 
		await driver.findElement(By.css("main")).click()
		// 4 | click | css=.empty_tile:nth-child(1) | 
		await driver.findElement(By.css(".empty_tile:nth-child(1)")).click()
		// 5 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
	})

	it('Plant', async function() {
		// Test name: Plant
		// Step # | name | target | value
		// 1 | open | http://127.0.0.1:5173/ | 
		await driver.get("http://127.0.0.1:5173/")
		// 2 | setWindowSize | 786x816 | 
		await driver.manage().window().setRect({ width: 786, height: 816 })
		// 3 | click | css=.empty_tile:nth-child(1) | 
		await driver.findElement(By.css(".empty_tile:nth-child(1)")).click()
		// 4 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 5 | click | css=.tilled_tile | 
		await driver.findElement(By.css(".tilled_tile")).click()
		// 6 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 7 | mouseOver | css=.popover_button | 
		{
		const element = await driver.findElement(By.css(".popover_button"))
		await driver.actions({ bridge: true }).move(element).perform()
		}
		// 8 | mouseOut | css=.popover_button | 
		{
		const element = await driver.findElement(By.css( "body"))
		await driver.actions({ bridge: true }).move(element, 0, 0).perform()
		}
		// 9 | click | css=.potato | 
		await driver.findElement(By.css(".potato")).click()
		// 10 | click | css=.modal_controls:nth-child(6) | 
		await driver.findElement(By.css(".modal_controls:nth-child(6)")).click()
	});

	it('Cancel Plant Selection', async function() {
		// Test name: Cancel Plant Selection
		// Step # | name | target | value
		// 1 | open | http://127.0.0.1:5173/ | 
		await driver.get("http://127.0.0.1:5173/")
		// 2 | setWindowSize | 786x816 | 
		await driver.manage().window().setRect({ width: 786, height: 816 })
		// 3 | click | css=.empty_tile:nth-child(1) | 
		await driver.findElement(By.css(".empty_tile:nth-child(1)")).click()
		// 4 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 5 | click | css=.tilled_tile | 
		await driver.findElement(By.css(".tilled_tile")).click()
		// 6 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 7 | mouseOver | css=.popover_button | 
		{
		const element = await driver.findElement(By.css(".popover_button"))
		await driver.actions({ bridge: true }).move(element).perform()
		}
		// 8 | mouseOut | css=.popover_button | 
		{
		const element = await driver.findElement(By.css( "body"))
		await driver.actions({ bridge: true }).move(element, 0, 0).perform()
		}
		// 9 | click | css=.btn-secondary | 
		await driver.findElement(By.css(".btn-secondary")).click()
	});

	it('Remove plant during duration', async function() {
		// Test name: Remove plant during duration
		// Step # | name | target | value
		// 1 | open | http://127.0.0.1:5173/ | 
		await driver.get("http://127.0.0.1:5173/")
		// 2 | setWindowSize | 786x816 | 
		await driver.manage().window().setRect({ width: 786, height: 816 })
		// 3 | click | css=.empty_tile:nth-child(1) | 
		await driver.findElement(By.css(".empty_tile:nth-child(1)")).click()
		// 4 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 5 | click | css=.tilled_tile | 
		await driver.findElement(By.css(".tilled_tile")).click()
		// 6 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 7 | mouseOver | css=.popover_button | 
		{
		const element = await driver.findElement(By.css(".popover_button"))
		await driver.actions({ bridge: true }).move(element).perform()
		}
		// 8 | mouseOut | css=.popover_button | 
		{
		const element = await driver.findElement(By.css( "body"))
		await driver.actions({ bridge: true }).move(element, 0, 0).perform()
		}
		// 9 | click | css=.potato | 
		await driver.findElement(By.css(".potato")).click()
		// 10 | click | css=.modal_controls:nth-child(6) | 
		await driver.findElement(By.css(".modal_controls:nth-child(6)")).click()
		// 11 | click | css=.potato | 
		await driver.findElement(By.css(".potato")).click()
		// 12 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 13 | click | css=.btn-secondary | 
		await driver.findElement(By.css(".btn-secondary")).click()
	})

	it('Cancel during remove plant', async function() {
		// Test name: Cancel during remove plant
		// Step # | name | target | value
		// 1 | open | http://127.0.0.1:5173/ | 
		await driver.get("http://127.0.0.1:5173/")
		// 2 | setWindowSize | 788x816 | 
		await driver.manage().window().setRect({ width: 788, height: 816 })
		// 3 | click | css=.empty_tile:nth-child(1) | 
		await driver.findElement(By.css(".empty_tile:nth-child(1)")).click()
		// 4 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 5 | click | css=.tilled_tile | 
		await driver.findElement(By.css(".tilled_tile")).click()
		// 6 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 7 | click | css=.potato | 
		await driver.findElement(By.css(".potato")).click()
		// 8 | click | css=.modal_controls:nth-child(6) | 
		await driver.findElement(By.css(".modal_controls:nth-child(6)")).click()
		// 9 | click | css=.potato | 
		await driver.findElement(By.css(".potato")).click()
		// 10 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 11 | click | css=.btn-danger | 
		await driver.findElement(By.css(".btn-danger")).click()
	});

	it('Remove plant during harvest', async function() {
		// Test name: Remove plant during harvest
		// Step # | name | target | value
		// 1 | open | http://127.0.0.1:5173/ | 
		await driver.get("http://127.0.0.1:5173/")
		// 2 | setWindowSize | 786x816 | 
		await driver.manage().window().setRect({ width: 786, height: 816 })
		// 3 | click | css=.empty_tile:nth-child(1) | 
		await driver.findElement(By.css(".empty_tile:nth-child(1)")).click()
		// 4 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 5 | click | css=.tilled_tile | 
		await driver.findElement(By.css(".tilled_tile")).click()
		// 6 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 7 | mouseOver | css=.popover_button | 
		{
		  const element = await driver.findElement(By.css(".popover_button"))
		  await driver.actions({ bridge: true }).move(element).perform()
		}
		// 8 | mouseOut | css=.popover_button | 
		{
		  const element = await driver.findElement(By.css("body"))
		  await driver.actions({ bridge: true }).move(element, 0, 0).perform()
		}
		// 9 | click | css=.potato | 
		await driver.findElement(By.css(".potato")).click()
		// 10 | click | css=.modal_controls:nth-child(6) | 
		await driver.findElement(By.css(".modal_controls:nth-child(6)")).click()
		// 11 | click | css=.potato | 
		await driver.findElement(By.css(".potato")).click()
		// 12 | click | css=.remove | 
		await driver.findElement(By.css(".remove")).click()
		// 13 | click | css=.btn-secondary | 
		await driver.findElement(By.css(".btn-secondary")).click()
	})

	it('harvest & assert text', async function() {
		// Test name: harvest & assert text
		// Step # | name | target | value
		// 1 | open | http://127.0.0.1:5173/ | 
		await driver.get("http://127.0.0.1:5173/")
		// 2 | setWindowSize | 786x816 | 
		await driver.manage().window().setRect({ width: 786, height: 816 })
		// 3 | click | css=.empty_tile:nth-child(1) | 
		await driver.findElement(By.css(".empty_tile:nth-child(1)")).click()
		// 4 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 5 | click | css=.tilled_tile | 
		await driver.findElement(By.css(".tilled_tile")).click()
		// 6 | click | css=.popover_button | 
		await driver.findElement(By.css(".popover_button")).click()
		// 7 | click | css=.crop_plant:nth-child(1) > p | 
		await driver.findElement(By.css(".crop_plant:nth-child(1) > p")).click()
		// 8 | click | css=.modal_controls:nth-child(6) | 
		await driver.findElement(By.css(".modal_controls:nth-child(6)")).click()
		// 9 | waitForElementPresent | css=.harvest_tile | 21000
		await driver.wait(until.elementLocated(By.css(".harvest_tile")), 21000)
		// 10 | click | css=.harvest_tile | 
		await driver.findElement(By.css(".harvest_tile")).click()
		// 11 | click | css=.popover_button:nth-child(1) | 
		await driver.findElement(By.css(".popover_button:nth-child(1)")).click()
		// 12 | assertText | css=p | Total Earnings: 55$
		assert(await driver.findElement(By.css("p")).getText() == "Total Earnings: 55$")
	})

	it('Assert Expand Land', async function() {
		// Test name: Assert Expand Land
		// Step # | name | target | value
		// 1 | open | http://127.0.0.1:5173/ | 
		await driver.get("http://127.0.0.1:5173/")
		// 2 | setWindowSize | 786x816 | 
		await driver.manage().window().setRect({ width: 786, height: 816 })
		// 3 | click | css=main | 
		await driver.findElement(By.css("main")).click()
		// 4 | assertElementPresent | id=land_expand_btn | 
		{
		  const elements = await driver.findElements(By.id("land_expand_btn"))
		  assert(elements.length)
		}
	})
})

